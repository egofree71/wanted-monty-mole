Tools used : ICU64 with Winvice 2.3, Infiltrator Disassembler, SpritePad, Charpad.

Map :$4000 - $77ff
Character set : $0800-$0fff
Width : 256 characters, Height : 56 characters
First line : $4000 - $40ff
second       $4100 - $41ff

MAZE :

Maze start : 503a

8EC0 jsr 28DE -> C854 -> create schema of the maze
8EC5 jsr CA9D -> create the graphics's maze
8EC8 jst CB4E -> add ladders

Four different cell types :
$61 : vertical
$7e : turn left
$e2 : horizontal
$ec : 236

1130 : column number
1131,1132 : position of the current cell
1135 : Value of the current cell
1133 : direction of the next cell
0-> Down
1-> Left
2-> Top
3-> Right
1133: first direction
1136,1137 : position of the next cell
1138 : Value of the new cell
113A : number of cells filled

C88E: with the new direction (1133), test if an adjacent cell is empty. If it's empty, fill it.
C99F: goto to next cell (increase 1131,1132). if we are beyond 0567 (9th row), reset to 0400.
C9CB: Get another direction (1133: 0->1, 1->2, 2->3, 3->0)
CA2C: We filled a cell. Increase 113A, 113B. If the number is bigger or equal to $167 (359), stop the maze generation.

Introduction :

8ECB jsr 8FCD -> Prepare introduction (display introduction panel)
8ECE jmp 8EDD -> jsr 906B -> Introduction

90BD : color animation

ee,ef : horizontal and vertical positions of the cursor in the small rectangle
f0, f1 : horizontal and vertical positions of the cursor in the big rectangle

First line of color map : d9b9

Game :

FA : x position in the map
FB : y position in the map

Characters around the player:

 642  643   644
 66a player 66c
 692 player 694
 6ba  6bb   6bc

1000 : offset horizontal scrolling (d016)
1001 : offset vertical scrolling (d011)
1002 : Direction of the player
1068-106e : sprite x low
106f-1075 : sprite x high (left ...fe ff player 01 02 ... right)
1076-107c : sprite y low
107d-1083 : sprite y high (up ...fe ff player 01 02 ... down)
1084-108a : sprite pointers
1092-1098 : sprite colors
109a : counter used for sprite animation of the player
109b : fall length
109c : offset left slope
109d : offset right slope
109f : 1 -> jumping
10a0 : jump's step
10a1 : 4 -> jump left
       0 -> jump above
       8 -> jump right
1144 : current level

8EE0 : Start
C000 : Test joystick and put direction into $1002
C0F4 : Test player direction (1004) :
    if up(1)    -> move map up (c44b)
    if down(2)  -> move map down (c474)
	if left(4)  -> move map left (c3f9)
	if right(8) -> move map right (c422)
c4F0 : left slope
c50D : right slope
c5A4, CB9E : test collision when player is going to the left
C5B9, CBB3 : test collision when player is going to the right
C4CB : test collision when player is going up
C591 : test collision when player is going down
C7C6 : elevator going up
C7DC : elevator going down

C615 : process jump
CD77 : test collision with crushers
CD4c : test collision with bridges

314-315 (interrupt) -> 1b7b

1c07-1c52 : update monsters sprites. if 107D-1083 = 0, update.
1c53-1d03 : update characters set for tiles animation.
1e93 : test collision with worms box. If true 1074 = 80, then goto 1ed5 -> fill up health bar.
1ef8 : test collision with enemies. If true goto 23ee -> if more than 4 hits (3 level hard), goto 23fe (ldx #$1d) and goto 1eae -> decrease health bar.
Player sprite 0 : 7f8(c0) -> 3000
1d04 : move squirrel. 1145 -> distance. 108c -> direction.
1da4 : move hazelnut. 1146 -> distance. 
1f79 : randow walk for monsters. 1162-1165 -> directions. 0-> right. 1-> left. 2-> down. 3-> up.
2450 : move gas. 1239 -> direction. 123a -> distance.
26a9 : move trolley. 12f5 12f6 -> distance.
2735 : move arrows. 1328 -> distance.
996E : game over.